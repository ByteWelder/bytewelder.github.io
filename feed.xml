<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-05-08T23:12:37+02:00</updated><id>/</id><title type="html">Byte Welder</title><subtitle>Learnings, experiments and projects.
</subtitle><entry><title type="html">Borrowing from Kotlin</title><link href="/posts/2017/05/08/borrowing-from-kotlin.html" rel="alternate" type="text/html" title="Borrowing from Kotlin" /><published>2017-05-08T21:57:00+02:00</published><updated>2017-05-08T21:57:00+02:00</updated><id>/posts/2017/05/08/borrowing-from-kotlin</id><content type="html" xml:base="/posts/2017/05/08/borrowing-from-kotlin.html">&lt;p&gt;Not all projects can be easily migrated to Kotlin, but that doesn’t mean we can’t benefit from Kotlin within Java.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;One of the things we can borrow from Kotlin in Java/Android is its clever naming scheme for constructing/converting objects.
Kotlin comes with various methods such as &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-list-of.html&quot;&gt;mutableListOf()&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutableListOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows Kotlin to define new static mapping/construction methods in a consistent manner.
Kotlin follows a naming scheme where &lt;code class=&quot;highlighter-rouge&quot;&gt;YourClass&lt;/code&gt; becomes a static method &lt;code class=&quot;highlighter-rouge&quot;&gt;yourClassOf(...)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The benefit of using this in Java lies within your development environment. Once you type &lt;code class=&quot;highlighter-rouge&quot;&gt;yourClassOf&lt;/code&gt;,
you can summon up all implementations that create an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;YourClass&lt;/code&gt;. In Android Studio or IntelliJ, you just press &lt;code class=&quot;highlighter-rouge&quot;&gt;F1&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2017-05-08-ide.png&quot; alt=&quot;Android Studio / IntelliJ IDEA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So why not apply the same idiom to Java?&lt;/p&gt;</content><author><name></name></author><summary type="html">Not all projects can be easily migrated to Kotlin, but that doesn’t mean we can’t benefit from Kotlin within Java.</summary></entry></feed>